

	memory_map: HASH_TABLE [ARRAYED_LIST [ANY], INTEGER]
			-- Retrieves all object in system as a table indexed by dynamic type
			-- where elements are all instances of a given data type.
		local
			i, nb, dtype: INTEGER
			l_spec: SPECIAL [ANY]
			l_item: ANY
			l_list: detachable ARRAYED_LIST [ANY]
			l_memory_count_map: HASH_TABLE [INTEGER, INTEGER]
		do
				-- First get all object instances in runtime.
			l_spec := find_all_instances (special_any_dynamic_type)

				-- Now create a memory count map of all objects. There are two reasons
				-- why we do not simply query `memory_count_map':
				-- 1. This would cause two calls to `find_all_instances'.
				-- 2. The new objects created by the first call would be included in the
				-- second list so they would not match exactly.

				-- The reason why we prepass and create a memory count map is
				-- to enable us to create the arrayed lists in `Result' with
				-- the exact size required for their contents. Even though we now have to
				-- perform the prepass, `memory_map' is approx 15-20% faster as
				-- resizing the arrayed lists each time an item was addded is slow.

			create l_memory_count_map.make (100)
			from
				i := 0
				nb := l_spec.count
			until
				i >= nb
			loop
				l_item := l_spec.item (i)
				if l_item /= Void then
					dtype := l_item.generating_type.type_id
					l_memory_count_map.force (l_memory_count_map.item (dtype) + 1, dtype)
				end
				i := i + 1
			end

				-- Now create table indexed by dynamic type. For a given
				-- dynamic type, we will have a list of all objects of
				-- this type.
			create Result.make (100)
			from
				i := 0
				nb := l_spec.count
			until
				i >= nb
			loop
				l_item := l_spec.item (i)
				if l_item /= Void then
					dtype := l_item.generating_type.type_id
					Result.search (dtype)
					if Result.found and then attached Result.found_item as l_found_item then
						l_list := l_found_item
					else
						create l_list.make (l_memory_count_map.item (dtype))
						Result.put (l_list, dtype)
					end
					l_list.extend (l_item)
				end
				i := i + 1
			end
		end


