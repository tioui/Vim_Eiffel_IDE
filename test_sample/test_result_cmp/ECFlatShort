
note
	description: "[
		Access to internal object properties.
		This class may be used as ancestor by classes needing its facilities.
	]"
	library: "Free implementation of ELKS library"
	legal: "See notice at end of class."
	status: "See notice at end of class."
	date: "$Date: 2013-04-08 17:12:32 -0700 (Mon, 08 Apr 2013) $"
	revision: "$Revision: 92422 $"

class interface
	INTERNAL

create 
	default_create
			-- Process instances of classes with no creation clause.
			-- (Default: do nothing.)
			-- (from ANY)

feature -- Initialization

	default_create
			-- Process instances of classes with no creation clause.
			-- (Default: do nothing.)
			-- (from ANY)
	
feature -- Access

	attached_type (type_id: INTEGER_32): INTEGER_32
			-- Attached version of `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
		ensure -- from REFLECTOR
			unchanged_if_attached: is_attached_type (type_id) implies type_id = Result

	Bit_type: INTEGER_32 = 8
			-- This type is obsolete and is not used anymore.
			-- (from REFLECTOR_CONSTANTS)

	boolean_field (i: INTEGER_32; object: ANY): BOOLEAN
			-- Boolean value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			boolean_field: field_type (i, object) = Boolean_type

	Boolean_type: INTEGER_32 = 3
			-- Abstract type ID for predefined type BOOLEAN.
			-- (from REFLECTOR_CONSTANTS)

	character_32_field (i: INTEGER_32; object: ANY): CHARACTER_32
			-- Character value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			character_32_field: field_type (i, object) = Character_32_type

	Character_32_type: INTEGER_32 = 12
			-- Abstract type ID for predefined type CHARACTER_32.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Wide_character_type.
			-- (from REFLECTOR_CONSTANTS)

	character_8_field (i: INTEGER_32; object: ANY): CHARACTER_8
			-- Character value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of character_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			character_8_field: field_type (i, object) = Character_8_type

	Character_8_type: INTEGER_32 = 2
			-- Abstract type ID for predefined type CHARACTER_8.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Character_type.
			-- (from REFLECTOR_CONSTANTS)

	character_field (i: INTEGER_32; object: ANY): CHARACTER_8
			-- Character value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of character_8_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			character_8_field: field_type (i, object) = Character_8_type

	Character_type: INTEGER_32 = 2
			-- Abstract type ID for predefined type CHARACTER_8.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Character_8_type.
			-- (from REFLECTOR_CONSTANTS)

	class_name (object: ANY): STRING_8
			-- Name of the class associated with `object'
		require
			object_not_void: object /= Void

	class_name_of_type (type_id: INTEGER_32): STRING_8
			-- Name of class associated with dynamic type `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	detachable_type (type_id: INTEGER_32): INTEGER_32
			-- Detachable version of `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
		ensure -- from REFLECTOR
			unchanged_if_detachable: not is_attached_type (type_id) implies type_id = Result

	double_field (i: INTEGER_32; object: ANY): REAL_64
			-- Double precision value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of real_64_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_64_field: field_type (i, object) = Real_64_type

	Double_type: INTEGER_32 = 6
			-- Abstract type ID for predefined type REAL_64.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Real_64_type.
			-- (from REFLECTOR_CONSTANTS)

	dynamic_type (object: ANY): INTEGER_32
			-- Dynamic type of `object'
		require
			object_not_void: object /= Void
		ensure
			dynamic_type_nonnegative: Result >= 0

	Expanded_type: INTEGER_32 = 7
			-- Abstract type ID for a non-predefined expanded type.
			-- (from REFLECTOR_CONSTANTS)

	field (i: INTEGER_32; object: ANY): detachable ANY
			-- Object attached to the `i'-th field of `object'
			-- (directly or through a reference)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			not_special: not is_special (object)

	field_name (i: INTEGER_32; object: ANY): STRING_8
			-- Name of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			not_special: not is_special (object)
		ensure
			result_exists: Result /= Void

	field_name_of_type (i: INTEGER_32; type_id: INTEGER_32): STRING_8
			-- Name of `i'-th field of dynamic type `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			index_large_enough: i >= 1
			index_small_enought: i <= field_count_of_type (type_id)

	field_offset (i: INTEGER_32; object: ANY): INTEGER_32
			-- Offset of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			not_special: not is_special (object)

	field_static_type_of_type (i: INTEGER_32; type_id: INTEGER_32): INTEGER_32
			-- Static type of declared `i'-th field of dynamic type `type_id'
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			index_large_enough: i >= 1
			index_small_enough: i <= field_count_of_type (type_id)
		ensure -- from REFLECTOR
			field_type_nonnegative: Result >= 0

	field_type (i: INTEGER_32; object: ANY): INTEGER_32
			-- Abstract type of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
		ensure
			field_type_nonnegative: Result >= 0

	field_type_of_type (i: INTEGER_32; type_id: INTEGER_32): INTEGER_32
			-- Abstract type of `i'-th field of dynamic type `type_id'
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			index_large_enough: i >= 1
			index_small_enough: i <= field_count_of_type (type_id)
		ensure -- from REFLECTOR
			field_type_nonnegative: Result >= 0

	generating_type: TYPE [detachable INTERNAL]
			-- Type of current object
			-- (type of which it is a direct instance)
			-- (from ANY)
		ensure -- from ANY
			generating_type_not_void: Result /= Void

	generator: STRING_8
			-- Name of current object's generating class
			-- (base class of the type of which it is a direct instance)
			-- (from ANY)
		ensure -- from ANY
			generator_not_void: Result /= Void
			generator_not_empty: not Result.is_empty

	generic_count (obj: ANY): INTEGER_32
			-- Number of generic parameter in `obj'.
		require
			obj_not_void: obj /= Void

	generic_count_of_type (type_id: INTEGER_32): INTEGER_32
			-- Number of generic parameter in `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	generic_dynamic_type (obj: ANY; i: INTEGER_32): INTEGER_32
			-- Dynamic type of generic parameter of `object' at
			-- position `i'.
		require
			obj_not_void: obj /= Void
			obj_generic: generic_count (obj) > 0
			i_valid: i > 0 and i <= generic_count (obj)
		ensure
			dynamic_type_nonnegative: Result >= 0

	generic_dynamic_type_of_type (type_id: INTEGER_32; i: INTEGER_32): INTEGER_32
			-- Dynamic type of generic parameter of `type_id' at position `i'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			type_id_generic: generic_count_of_type (type_id) > 0
			i_valid: i > 0 and i <= generic_count_of_type (type_id)
		ensure -- from REFLECTOR
			dynamic_type_nonnegative: Result >= 0

	integer_16_field (i: INTEGER_32; object: ANY): INTEGER_16
			-- Integer value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_16_field: field_type (i, object) = Integer_16_type

	Integer_16_type: INTEGER_32 = 10
			-- Abstract type ID for predefined type INTEGER_16.
			-- (from REFLECTOR_CONSTANTS)

	integer_32_field (i: INTEGER_32; object: ANY): INTEGER_32
			-- Integer value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of integer_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_32_field: field_type (i, object) = Integer_32_type

	Integer_32_type: INTEGER_32 = 4
			-- Abstract type ID for predefined type INTEGER_32.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Integer_type.
			-- (from REFLECTOR_CONSTANTS)

	integer_64_field (i: INTEGER_32; object: ANY): INTEGER_64
			-- Integer value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_64_field: field_type (i, object) = Integer_64_type

	Integer_64_type: INTEGER_32 = 11
			-- Abstract type ID for predefined type INTEGER_64.
			-- (from REFLECTOR_CONSTANTS)

	integer_8_field (i: INTEGER_32; object: ANY): INTEGER_8
			-- Integer value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_8_field: field_type (i, object) = Integer_8_type

	Integer_8_type: INTEGER_32 = 9
			-- Abstract type ID for predefined type INTEGER_8.
			-- (from REFLECTOR_CONSTANTS)

	integer_field (i: INTEGER_32; object: ANY): INTEGER_32
			-- Integer value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of integer_32_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_32_field: field_type (i, object) = Integer_32_type

	Integer_type: INTEGER_32 = 4
			-- Abstract type ID for predefined type INTEGER_32.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Integer_32_type.
			-- (from REFLECTOR_CONSTANTS)

	Max_predefined_type: INTEGER_32 = 16
			-- (from REFLECTOR_CONSTANTS)

	Min_predefined_type: INTEGER_32 = -2
			-- (from REFLECTOR_CONSTANTS)

	natural_16_field (i: INTEGER_32; object: ANY): NATURAL_16
			-- NATURAL_16 value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_16_field: field_type (i, object) = Natural_16_type

	Natural_16_type: INTEGER_32 = 14
			-- Abstract type ID for predefined type NATURAL_16.
			-- (from REFLECTOR_CONSTANTS)

	natural_32_field (i: INTEGER_32; object: ANY): NATURAL_32
			-- NATURAL_32 value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_field: field_type (i, object) = Natural_32_type

	Natural_32_type: INTEGER_32 = 15
			-- Abstract type ID for predefined type NATURAL_32.
			-- (from REFLECTOR_CONSTANTS)

	natural_64_field (i: INTEGER_32; object: ANY): NATURAL_64
			-- NATURAL_64 value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_64_field: field_type (i, object) = Natural_64_type

	Natural_64_type: INTEGER_32 = 16
			-- Abstract type ID for predefined type NATURAL_64.
			-- (from REFLECTOR_CONSTANTS)

	natural_8_field (i: INTEGER_32; object: ANY): NATURAL_8
			-- NATURAL_8 value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_8_field: field_type (i, object) = Natural_8_type

	Natural_8_type: INTEGER_32 = 13
			-- Abstract type ID for predefined type NATURAL_8.
			-- (from REFLECTOR_CONSTANTS)

	None_type: INTEGER_32 = -2
			-- Type ID representation for NONE.
			-- (from REFLECTOR_CONSTANTS)

	pointer_field (i: INTEGER_32; object: ANY): POINTER
			-- Pointer value of `i'-th field of `object'
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			pointer_field: field_type (i, object) = Pointer_type

	Pointer_type: INTEGER_32 = 0
			-- Abstract type ID for predefined type POINTER.
			-- (from REFLECTOR_CONSTANTS)

	real_32_field (i: INTEGER_32; object: ANY): REAL_32
			-- Real value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of real_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_32_field: field_type (i, object) = Real_32_type

	Real_32_type: INTEGER_32 = 5
			-- Abstract type ID for predefined type REAL_32.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Real_type.
			-- (from REFLECTOR_CONSTANTS)

	real_64_field (i: INTEGER_32; object: ANY): REAL_64
			-- Double precision value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of double_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_64_field: field_type (i, object) = Real_64_type

	Real_64_type: INTEGER_32 = 6
			-- Abstract type ID for predefined type REAL_64.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Double_type.
			-- (from REFLECTOR_CONSTANTS)

	real_field (i: INTEGER_32; object: ANY): REAL_32
			-- Real value of `i'-th field of `object'
			-- Was declared in INTERNAL as synonym of real_32_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_32_field: field_type (i, object) = Real_32_type

	Real_type: INTEGER_32 = 5
			-- Abstract type ID for predefined type REAL_32.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Real_32_type.
			-- (from REFLECTOR_CONSTANTS)

	reference_field (i: INTEGER_32; object: ANY): detachable ANY
			-- Reference value of the `i'-th field of `object'.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			not_special: not is_special (object)
			valid_type: field_type (i, object) = Reference_type

	Reference_type: INTEGER_32 = 1
			-- Abstract type ID for a reference type.
			-- (from REFLECTOR_CONSTANTS)

	storable_version_of_type (a_type_id: INTEGER_32): detachable IMMUTABLE_STRING_8
			-- Storable version if any specified.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			a_type_id_nonnegative: a_type_id >= 0

	type_name (object: ANY): STRING_8
			-- Name of `object''s generating type (type of which `object'
			-- is a direct instance).
		require
			object_not_void: object /= Void

	type_name_of_type (type_id: INTEGER_32): STRING_8
			-- Name of `type_id''s generating type (type of which `type_id'
			-- is a direct instance).
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	Wide_character_type: INTEGER_32 = 12
			-- Abstract type ID for predefined type CHARACTER_32.
			-- Was declared in REFLECTOR_CONSTANTS as synonym of Character_32_type.
			-- (from REFLECTOR_CONSTANTS)
	
feature -- Measurement

	deep_physical_size (object: ANY): INTEGER_32
			-- Space occupied by `object' and its children in bytes
		require
			object_not_void: object /= Void

	deep_physical_size_64 (object: ANY): NATURAL_64
			-- Space occupied by `object' and its children in bytes
		require
			object_not_void: object /= Void

	field_count (object: ANY): INTEGER_32
			-- Number of logical fields in `object'
		require
			object_not_void: object /= Void

	field_count_of_type (type_id: INTEGER_32): INTEGER_32
			-- Number of logical fields in dynamic type `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	persistent_field_count (object: ANY): INTEGER_32
			-- Number of logical fields in `object' that are not transient.
		require
			object_not_void: object /= Void
		ensure
			count_positive: Result >= 0

	persistent_field_count_of_type (a_type_id: INTEGER_32): INTEGER_32
			-- Number of logical fields in dynamic type `type_id' that are not transient.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			a_type_non_negative: a_type_id >= 0

	physical_size (object: ANY): INTEGER_32
			-- Space occupied by `object' in bytes
		require
			object_not_void: object /= Void

	physical_size_64 (object: ANY): NATURAL_64
			-- Space occupied by `object' in bytes
		require
			object_not_void: object /= Void
	
feature -- Comparison

	frozen deep_equal (a: detachable ANY; b: like arg #1): BOOLEAN
			-- Are `a' and `b' either both void
			-- or attached to isomorphic object structures?
			-- (from ANY)
		ensure -- from ANY
			shallow_implies_deep: standard_equal (a, b) implies Result
			both_or_none_void: (a = Void) implies (Result = (b = Void))
			same_type: (Result and (a /= Void)) implies (b /= Void and then a.same_type (b))
			symmetric: Result implies deep_equal (b, a)

	frozen equal (a: detachable ANY; b: like arg #1): BOOLEAN
			-- Are `a' and `b' either both void or attached
			-- to objects considered equal?
			-- (from ANY)
		ensure -- from ANY
			definition: Result = (a = Void and b = Void) or else ((a /= Void and b /= Void) and then a.is_equal (b))

	frozen is_deep_equal (other: attached INTERNAL): BOOLEAN
			-- Are `Current' and `other' attached to isomorphic object structures?
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
		ensure -- from ANY
			shallow_implies_deep: standard_is_equal (other) implies Result
			same_type: Result implies same_type (other)
			symmetric: Result implies other.is_deep_equal (Current)

	is_equal (other: attached INTERNAL): BOOLEAN
			-- Is `other' attached to an object considered
			-- equal to current object?
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
		ensure -- from ANY
			symmetric: Result implies other ~ Current
			consistent: standard_is_equal (other) implies Result

	frozen standard_equal (a: detachable ANY; b: like arg #1): BOOLEAN
			-- Are `a' and `b' either both void or attached to
			-- field-by-field identical objects of the same type?
			-- Always uses default object comparison criterion.
			-- (from ANY)
		ensure -- from ANY
			definition: Result = (a = Void and b = Void) or else ((a /= Void and b /= Void) and then a.standard_is_equal (b))

	frozen standard_is_equal (other: attached INTERNAL): BOOLEAN
			-- Is `other' attached to an object of the same type
			-- as current object, and field-by-field identical to it?
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
		ensure -- from ANY
			same_type: Result implies same_type (other)
			symmetric: Result implies other.standard_is_equal (Current)
	
feature -- Status report

	conforms_to (other: ANY): BOOLEAN
			-- Does type of current object conform to type
			-- of `other' (as per Eiffel: The Language, chapter 13)?
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void

	is_attached_type (a_type_id: INTEGER_32): BOOLEAN
			-- Is `a_type_id' an attached type?
			-- (from REFLECTOR)
		require -- from REFLECTOR
			a_type_non_negative: a_type_id >= 0

	is_field_expanded (i: INTEGER_32; object: ANY): BOOLEAN
			-- Is `i'-th field of `object' a user-defined expanded attribute?
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)

	is_field_expanded_of_type (i: INTEGER_32; a_type_id: INTEGER_32): BOOLEAN
			-- Is `i'-th field of type `a_type_id' a user-defined expanded attribute?
			-- (from REFLECTOR)
		require -- from REFLECTOR
			a_type_non_negative: a_type_id >= 0
			index_large_enough: i >= 1
			index_small_enough: i <= field_count_of_type (a_type_id)

	is_field_transient (i: INTEGER_32; object: ANY): BOOLEAN
			-- Is `i'-th field of `object' a transient attribute?
			-- I.e. an attribute that does not need to be stored?
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)

	is_field_transient_of_type (i: INTEGER_32; a_type_id: INTEGER_32): BOOLEAN
			-- Is `i'-th field of `object' a transient attribute?
			-- I.e. an attribute that does not need to be stored?
			-- (from REFLECTOR)
		require -- from REFLECTOR
			a_type_non_negative: a_type_id >= 0
			index_large_enough: i >= 1
			index_small_enough: i <= field_count_of_type (a_type_id)

	is_marked (obj: ANY): BOOLEAN
			-- Is `obj' marked?
			-- (from OBJECT_GRAPH_MARKER)
		require -- from OBJECT_GRAPH_MARKER
			object_exists: obj /= Void

	is_pre_ecma_mapping_disabled: BOOLEAN
			-- Are we mapping old names to new ECMA names?
			-- False means mapping STRING to STRING_8, INTEGER to INTEGER_32,...
			-- Redefine in descendants of REFLECTOR to modify the behavior of inspection queries of REFLECTOR.
			-- (from REFLECTOR_HELPER)

	is_special (object: ANY): BOOLEAN
			-- Is `object' a special object?
		require
			object_not_void: object /= Void

	is_special_any_type (type_id: INTEGER_32): BOOLEAN
			-- Is type represented by `type_id' represent
			-- a SPECIAL [XX] where XX is a reference type.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	is_special_type (type_id: INTEGER_32): BOOLEAN
			-- Is type represented by `type_id' represent
			-- a SPECIAL [XX] where XX is a reference type
			-- or a basic type.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	is_tuple (object: ANY): BOOLEAN
			-- Is `object' a TUPLE object?
		require
			object_not_void: object /= Void

	is_tuple_type (type_id: INTEGER_32): BOOLEAN
			-- Is type represented by `type_id' represent a TUPLE?
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0

	is_valid_type_string (s: READABLE_STRING_GENERAL): BOOLEAN
			-- Is `s' a valid string representation for a TYPE.
			-- (from REFLECTOR_HELPER)

	mapped_type (a_type: READABLE_STRING_GENERAL): READABLE_STRING_GENERAL
			-- If is_pre_ecma_mapping_disabled `a_type', otherwise
			-- the mapped typed.
			-- (from REFLECTOR_HELPER)
		require -- from REFLECTOR_HELPER
			a_type_not_void: a_type /= Void
		ensure -- from REFLECTOR_HELPER
			mapped_type_not_void: Result /= Void

	same_type (other: ANY): BOOLEAN
			-- Is type of current object identical to type of `other'?
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
		ensure -- from ANY
			definition: Result = (conforms_to (other) and other.conforms_to (Current))
	
feature -- Element change

	set_boolean_field (i: INTEGER_32; object: ANY; value: BOOLEAN)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			boolean_field: field_type (i, object) = Boolean_type

	set_character_32_field (i: INTEGER_32; object: ANY; value: CHARACTER_32)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			character_32_field: field_type (i, object) = Character_32_type

	set_character_8_field (i: INTEGER_32; object: ANY; value: CHARACTER_8)
			-- Was declared in INTERNAL as synonym of set_character_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			character_8_field: field_type (i, object) = Character_8_type

	set_character_field (i: INTEGER_32; object: ANY; value: CHARACTER_8)
			-- Was declared in INTERNAL as synonym of set_character_8_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			character_8_field: field_type (i, object) = Character_8_type

	set_double_field (i: INTEGER_32; object: ANY; value: REAL_64)
			-- Was declared in INTERNAL as synonym of set_real_64_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_64_field: field_type (i, object) = Real_64_type

	set_integer_16_field (i: INTEGER_32; object: ANY; value: INTEGER_16)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_16_field: field_type (i, object) = Integer_16_type

	set_integer_32_field (i: INTEGER_32; object: ANY; value: INTEGER_32)
			-- Was declared in INTERNAL as synonym of set_integer_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_32_field: field_type (i, object) = Integer_32_type

	set_integer_64_field (i: INTEGER_32; object: ANY; value: INTEGER_64)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_64_field: field_type (i, object) = Integer_64_type

	set_integer_8_field (i: INTEGER_32; object: ANY; value: INTEGER_8)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_8_field: field_type (i, object) = Integer_8_type

	set_integer_field (i: INTEGER_32; object: ANY; value: INTEGER_32)
			-- Was declared in INTERNAL as synonym of set_integer_32_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			integer_32_field: field_type (i, object) = Integer_32_type

	set_natural_16_field (i: INTEGER_32; object: ANY; value: NATURAL_16)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_16_field: field_type (i, object) = Natural_16_type

	set_natural_32_field (i: INTEGER_32; object: ANY; value: NATURAL_32)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_32_field: field_type (i, object) = Natural_32_type

	set_natural_64_field (i: INTEGER_32; object: ANY; value: NATURAL_64)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_64_field: field_type (i, object) = Natural_64_type

	set_natural_8_field (i: INTEGER_32; object: ANY; value: NATURAL_8)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			natural_8_field: field_type (i, object) = Natural_8_type

	set_pointer_field (i: INTEGER_32; object: ANY; value: POINTER)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			pointer_field: field_type (i, object) = Pointer_type

	set_real_32_field (i: INTEGER_32; object: ANY; value: REAL_32)
			-- Was declared in INTERNAL as synonym of set_real_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_32_field: field_type (i, object) = Real_32_type

	set_real_64_field (i: INTEGER_32; object: ANY; value: REAL_64)
			-- Was declared in INTERNAL as synonym of set_double_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_64_field: field_type (i, object) = Real_64_type

	set_real_field (i: INTEGER_32; object: ANY; value: REAL_32)
			-- Was declared in INTERNAL as synonym of set_real_32_field.
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			real_32_field: field_type (i, object) = Real_32_type

	set_reference_field (i: INTEGER_32; object: ANY; value: detachable ANY)
		require
			object_not_void: object /= Void
			index_large_enough: i >= 1
			index_small_enough: i <= field_count (object)
			reference_field: field_type (i, object) = Reference_type
			valid_value: is_attached_type (field_static_type_of_type (i, dynamic_type (object))) implies value /= Void
			value_conforms_to_field_static_type: value /= Void implies field_conforms_to (dynamic_type (value), field_static_type_of_type (i, dynamic_type (object)))
	
feature -- Duplication

	copy (other: attached INTERNAL)
			-- Update current object using fields of object attached
			-- to `other', so as to yield equal objects.
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
			type_identity: same_type (other)
		ensure -- from ANY
			is_equal: Current ~ other

	frozen deep_copy (other: attached INTERNAL)
			-- Effect equivalent to that of:
			--		copy (`other' . deep_twin)
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
		ensure -- from ANY
			deep_equal: deep_equal (Current, other)

	frozen deep_twin: attached INTERNAL
			-- New object structure recursively duplicated from Current.
			-- (from ANY)
		ensure -- from ANY
			deep_twin_not_void: Result /= Void
			deep_equal: deep_equal (Current, Result)

	frozen standard_copy (other: attached INTERNAL)
			-- Copy every field of `other' onto corresponding field
			-- of current object.
			-- (from ANY)
		require -- from ANY
			other_not_void: other /= Void
			type_identity: same_type (other)
		ensure -- from ANY
			is_standard_equal: standard_is_equal (other)

	frozen standard_twin: attached INTERNAL
			-- New object field-by-field identical to `other'.
			-- Always uses default copying semantics.
			-- (from ANY)
		ensure -- from ANY
			standard_twin_not_void: Result /= Void
			equal: standard_equal (Result, Current)

	frozen twin: attached INTERNAL
			-- New object equal to `Current'
			-- twin calls copy; to change copying/twinning semantics, redefine copy.
			-- (from ANY)
		ensure -- from ANY
			twin_not_void: Result /= Void
			is_equal: Result ~ Current
	
feature -- Basic operations

	frozen as_attached: attached INTERNAL
			-- Attached version of Current
			-- (Can be used during transitional period to convert
			-- non-void-safe classes to void-safe ones.)
			-- (from ANY)

	frozen default: detachable INTERNAL
			-- Default value of object's type
			-- (from ANY)

	frozen default_pointer: POINTER
			-- Default value of type `POINTER'
			-- (Avoid the need to write `p'.default for
			-- some `p' of type `POINTER'.)
			-- (from ANY)

	default_rescue
			-- Process exception for routines with no Rescue clause.
			-- (Default: do nothing.)
			-- (from ANY)

	frozen do_nothing
			-- Execute a null action.
			-- (from ANY)
	
feature -- Conformance

	field_conforms_to (a_source_type, a_field_type: INTEGER_32): BOOLEAN
			-- Does `a_source_type' conform to `a_field_type'?
			-- (from REFLECTOR)
		require -- from REFLECTOR
			a_source_type_non_negative: a_source_type >= 0
			a_field_type_non_negative: a_field_type >= 0

	is_instance_of (object: ANY; type_id: INTEGER_32): BOOLEAN
			-- Is `object' an instance of type `type_id'?
		require
			object_not_void: object /= Void
			type_id_nonnegative: type_id >= 0

	type_conforms_to (type1, type2: INTEGER_32): BOOLEAN
			-- Does `type1' conform to `type2'?
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type1_nonnegative: type1 >= 0
			type2_nonnegative: type2 >= 0
	
feature -- Creation

	dynamic_type_from_string (class_type: READABLE_STRING_GENERAL): INTEGER_32
			-- Dynamic type corresponding to `class_type'.
			-- If no dynamic type available, returns -1.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			class_type_not_void: class_type /= Void
			class_type_not_empty: not class_type.is_empty
			is_valid_type_string: is_valid_type_string (class_type)
		ensure -- from REFLECTOR
			dynamic_type_from_string_valid: Result = -1 or Result = None_type or Result >= 0

	new_instance_of (type_id: INTEGER_32): ANY
			-- New instance of dynamic `type_id'.
			-- Note: returned object is not initialized and may
			-- hence violate its invariant.
			-- `type_id' cannot represent a SPECIAL type, use
			-- new_special_any_instance instead.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			not_special_type: not is_special_type (type_id)
		ensure -- from REFLECTOR
			not_special_type: not attached {SPECIAL [detachable ANY]} Result
			dynamic_type_set: Result.generating_type.type_id = type_id

	new_special_any_instance (type_id, count: INTEGER_32): SPECIAL [detachable ANY]
			-- New instance of dynamic `type_id' that represents
			-- a SPECIAL with `count' element. To create a SPECIAL of
			-- basic type, use `SPECIAL'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			count_valid: count >= 0
			type_id_nonnegative: type_id >= 0
			special_type: is_special_any_type (type_id)
		ensure -- from REFLECTOR
			dynamic_type_set: Result.generating_type.type_id = type_id
			count_set: Result.count = 0
			capacity_set: Result.capacity = count

	new_tuple_from_special (type_id: INTEGER_32; values: SPECIAL [detachable ANY]): detachable TUPLE
			-- New instance of a tuple of type `type_id' filled with `values' if all types of items are suitable.
			-- `Void' if some items from `values' are inappropriate for a tuple of type `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			is_tuple_type: is_tuple_type (type_id)
		ensure -- from REFLECTOR
			dynamic_type_set: attached Result implies Result.generating_type.type_id = type_id
			values_set: attached Result implies across
					1 |..| Result.count as k
				all
					Result.item (k.item) = values [k.item - 1]
				end

	new_tuple_from_tuple (type_id: INTEGER_32; source: TUPLE): detachable TUPLE
			-- New instance of a tuple of type `type_id' filled with values fom `source' if all value types are suitable.
			-- `Void' if some values from `source' are inappropriate for a tuple of type `type_id'.
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
			is_tuple_type: is_tuple_type (type_id)
		ensure -- from REFLECTOR
			dynamic_type_set: attached Result implies Result.generating_type.type_id = type_id
			object_comparison_set: attached Result implies Result.object_comparison = source.object_comparison
			values_set: attached Result implies across
					1 |..| Result.count as k
				all
					Result.item (k.item) = source [k.item]
				end

	type_of (object: detachable ANY): TYPE [detachable ANY]
			-- Associated TYPE instance of `object'.
		ensure
			result_not_void: Result /= Void

	type_of_type (type_id: INTEGER_32): TYPE [detachable ANY]
			-- Associated TYPE instance for an object of type id `type_id'
			-- (from REFLECTOR)
		require -- from REFLECTOR
			type_id_nonnegative: type_id >= 0
		ensure -- from REFLECTOR
			result_not_void: Result /= Void
	
feature -- Marking

	lock_marking
			-- Get a lock on mark and unmark routine so that 2 threads cannot mark and
			-- unmark at the same time.
			-- (from OBJECT_GRAPH_MARKER)

	mark (obj: ANY)
			-- Mark object `obj'.
			-- To be thread safe, make sure to call this feature when you
			-- have the marking lock that you acquire using lock_marking.
			-- (from OBJECT_GRAPH_MARKER)
		require -- from OBJECT_GRAPH_MARKER
			object_not_void: obj /= Void
		ensure -- from OBJECT_GRAPH_MARKER
			is_marked: is_marked (obj)

	unlock_marking
			-- Release a lock on mark and unmark, so that another thread can
			-- use mark and unmark.
			-- (from OBJECT_GRAPH_MARKER)

	unmark (obj: ANY)
			-- Unmark object `obj'.
			-- To be thread safe, make sure to call this feature when you
			-- have the marking lock that you acquire using lock_marking.
			-- (from OBJECT_GRAPH_MARKER)
		require -- from OBJECT_GRAPH_MARKER
			object_not_void: obj /= Void
		ensure -- from OBJECT_GRAPH_MARKER
			is_not_marked: not is_marked (obj)
	
feature -- Output

	Io: STD_FILES
			-- Handle to standard file setup
			-- (from ANY)
		ensure -- from ANY
			io_not_void: Result /= Void

	out: STRING_8
			-- New string containing terse printable representation
			-- of current object
			-- (from ANY)
		ensure -- from ANY
			out_not_void: Result /= Void

	print (o: detachable ANY)
			-- Write terse external representation of `o'
			-- on standard output.
			-- (from ANY)

	frozen tagged_out: STRING_8
			-- New string containing terse printable representation
			-- of current object
			-- (from ANY)
		ensure -- from ANY
			tagged_out_not_void: Result /= Void
	
feature -- Platform

	Operating_environment: OPERATING_ENVIRONMENT
			-- Objects available from the operating system
			-- (from ANY)
		ensure -- from ANY
			operating_environment_not_void: Result /= Void
	
feature -- Retrieval

	frozen internal_correct_mismatch
			-- Called from runtime to perform a proper dynamic dispatch on `correct_mismatch'
			-- from MISMATCH_CORRECTOR.
			-- (from ANY)
	
feature -- Version

	compiler_version: INTEGER_32
			-- (from REFLECTOR)
	
invariant
		-- from ANY
	reflexive_equality: standard_is_equal (Current)
	reflexive_conformance: conforms_to (Current)

note
	copyright: "Copyright (c) 1984-2013, Eiffel Software and others"
	license: "Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)"
	source: "[
		Eiffel Software
		5949 Hollister Ave., Goleta, CA 93117 USA
		Telephone 805-685-1006, Fax 805-685-6869
		Website http://www.eiffel.com
		Customer support http://support.eiffel.com
	]"

end -- class INTERNAL


